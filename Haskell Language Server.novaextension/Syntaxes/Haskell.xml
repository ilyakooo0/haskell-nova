<?xml version="1.0" encoding="UTF-8"?>
<syntax name="haskell">
  <meta>
    <name>Haskell</name>
    <type>compiled</type>
    <preferred-file-extension>hs</preferred-file-extension>
  </meta>

  <detectors>
    <extension priority="1.0">hs</extension>
  </detectors>

  <comments>
    <single>
      <expression>--</expression>
    </single>
    <multiline>
      <starts-with>
        <expression>{-</expression>
      </starts-with>
      <ends-with>
        <expression>-}</expression>
      </ends-with>
    </multiline>
  </comments>

  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
  </brackets>

  <surrounding-pairs>
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&apos;" close="&apos;" />
    <pair open="&quot;" close="&quot;" />
    <pair open="`" close="`" />
  </surrounding-pairs>

  <indentation>
    <increase>
      <expression>
        (case|class|do|let|where|=).*
      </expression>
    </increase>
    <decrease>
      <expression>^\\s*(end|done|with|in|else)\\b|^\\s*;;</expression>
    </decrease>
  </indentation>


  <scopes>
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="module" />
    <include syntax="self" collection="import" />
    <include syntax="self" collection="type-family-definition" />
    <include syntax="self" collection="pattern-definition" />
    <include syntax="self" collection="type-definition" />
    <!--     <include syntax="self" collection="type-annotation" /> -->
    <include syntax="self" collection="GADT-definition" />
    <include syntax="self" collection="instance" />
    <include syntax="self" collection="typeclass" />
    <include syntax="self" collection="definition" />
  </scopes>

  <template-scopes>
    <include syntax="self" collection="Quote" />
    <include syntax="self" collection="comments" />
  </template-scopes>

  <collections>


    <collection name="operators">
      <scope name="keyword.modifier">
        <expression>(!|#|\$|%|&amp;|â‹†|\+|\.|/|&lt;|=|&gt;|\?|@|\\|\^|\||-|~|:)+</expression>
      </scope>
    </collection>

    <collection name="expressions">
      <include syntax="self" collection="do-bind" />
      <include syntax="self" collection="literal" />
      <include syntax="self" collection="operators" />
      <include syntax="self" collection="list" />
      <include syntax="self" collection="lambda-case" />
      <include syntax="self" collection="lambda-head" />
      <include syntax="self" collection="type-applications" />
      <include syntax="self" collection="outer-case-expression" />
      <include syntax="self" collection="qvarid" />
      <include syntax="self" collection="tuple" />


      <!-- Needed for do binds -->
      <!--       <include syntax="self" collection="pattern-match" /> -->
    </collection>

    <collection name="pattern-match">
      <include syntax="self" collection="literal" />
      <include syntax="self" collection="tuple-match" />
      <!--       <include syntax="self" collection="at-pattern" /> -->
      <include syntax="self" collection="varid" />
      <include syntax="self" collection="qconid" />
      <include syntax="self" collection="record-match" />
      <include syntax="self" collection="list-pattern" />
      <include syntax="self" collection="view-pattern" />
    </collection>

    <collection name="type-applications">
      <scope name="type-applications">
        <starts-with>
          <expression>(\s@)\(</expression>
          <capture number="1" name="haskell.keyword.operator.typeapplication" />
        </starts-with>
        <ends-with>
          <expression>)</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="type-applications-single">
        <expression>(@)(\w+)</expression>
        <capture number="1" name="haskell.keyword.operator.typeapplication" />
        <capture number="2" name="haskell.identifier.type" />
      </scope>
    </collection>

    <collection name="Quote">
      <scope name="haskell.quasiquote.string-template">
        <starts-with>
          <expression>\[((?:\w|')+)\|</expression>
          <capture number="1" name="haskell.identifier.constant" />
        </starts-with>
        <ends-with>
          <expression>\|\]</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.quasiquote.string-template.value">
            <expression>.+?</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="record-match">
      <include syntax="self" collection="qconid" />
      <include syntax="self" collection="record-fields-match" />
      <include syntax="self" collection="record-fields-match-all" />
    </collection>


    <collection name="record-fields-match">
      <scope name="record-fields-match">
        <symbol type="expression" />
        <starts-with>
          <expression>(\{)</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
          <include syntax="self" collection="varid" />
          <scope name="record-sep">
            <expression>=</expression>
          </scope>
          <scope name="record-sep">
            <expression>,</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="record-fields-match-wildcard">
      <scope name="record-fields-match-all">
        <starts-with>
          <expression>(\{)</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </ends-with>
        <subscopes>
          <scope name="haskell.pattern.record.wildcard">
            <expression>\.\.</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="bind-arrow">
      <scope name="haskell.operator.bind-arrow">
        <expression>&lt;-</expression>
      </scope>
    </collection>


    <collection name="list">
      <symbol type="expression" />
      <scope name="haskell.list">
        <starts-with>
          <expression>(\[)</expression>
          <capture number="1" name="haskell.list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="list-pattern">
      <symbol type="expression" />
      <scope name="haskell.pattern.list">
        <starts-with>
          <expression>(\[)</expression>
          <capture number="1" name="haskell.pattern.list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.pattern.list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>


    <collection name="view-pattern">
      <scope name="haskell.pattern.view">
        <symbol type="expression" />
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.pattern.view.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.pattern.view.bracket" />
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="expressions" />
          <scope name="haskell.pattern.view.operator.arrow">
            <expression>-&gt;</expression>
          </scope>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="tuple-match">
      <symbol type="expression" />
      <scope name="haskell.pattern.tuple">
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.pattern.tuple.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.pattern.tuple.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="case-expression">
      <scope name="haskell.case">
        <starts-with>
          <expression>(case)</expression>
          <capture number="1" name="haskell.case.keyword.condition" />
        </starts-with>
        <ends-with>
          <expression>(of)</expression>
          <capture number="1" name="haskell.case.keyword.condition" />
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="case-match">
      <scope name="case-match">
        <starts-with>
          <expression>(?=((\h*)\S.*-&gt;($|\h)))</expression>
        </starts-with>
        <ends-with>
          <expression>-&gt;</expression>
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="inner-case-expressions">
      <scope name="inner-case-expressions">
        <starts-with>
          <expression>(?=((\h*)\S.*-&gt;($|\h)))</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\1)(?!\2\h)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="case-match" />
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="outer-case-expression">
      <scope name="outer-case-expression">
        <starts-with>
          <expression>(?=case)</expression>
        </starts-with>
        <ends-with />
        <subscopes anchored="true" skip-whitespace="false">
          <include syntax="self" collection="case-expression" />
          <include syntax="self" collection="inner-case-expressions" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="tuple">
      <symbol type="expression" />
      <scope name="haskell.tuple">
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.tuple.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.tuple.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="typeclass">
      <symbol type="interface" />
      <scope name="haskell.definition.class">
        <starts-with>
          <expression>^(\h*)(class)($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.class" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="type" />
          <include syntax="self" collection="type-definition" />
          <!--           <include syntax="self" collection="type-annotation" /> -->
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>

    <collection name="instance">
      <scope name="haskell.instance">
        <symbol type="category" />
        <starts-with>
          <expression>^(\h*)(instance)($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.instance" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="type" />
          <include syntax="self" collection="type-definition" />
          <include syntax="self" collection="type-annotation" />
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-family-definition">
      <scope name="haskell.definition.type-family.type">
        <symbol type="type">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>^(\h*)(type\h+family)</expression>
          <capture number="2" name="haskell.keyword.construct.type-family" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes anchored="true" skip-whitespace="false">
          <scope name="haskell.type-family.head">
            <starts-with>
              <expression></expression>
            </starts-with>
            <ends-with>
              <expression>where</expression>
              <capture number="0" name="haskell.keyword.construct.where" />
            </ends-with>
            <subscopes anchored="true">
              <scope name="haskell.identifier.type-family.type.name">
                <expression>\S+</expression>
              </scope>
              <include syntax="self" collection="type" repeat="true" optional="true" />
            </subscopes>
          </scope>

          <include syntax="self" collection="type-family-case-definition" optional="true" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-family-case-definition">
      <scope name="haskell.definition.type-family.type.case">
        <starts-with>
          <expression>^(\h*)(?=\S)</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" optional="true" repeat="true" />
          <scope>
            <expression>=</expression>
          </scope>
          <include syntax="self" collection="type" optional="true" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="definition">
      <scope name="haskell.definition.type.function">
        <symbol type="function">
          <display-name>
            <component selector="haskell.definition.type.function" />
          </display-name>

        </symbol>
        <starts-with>
          <expression>^(?=(\h*)(default\h+)?`?(\w(\w|')*)`?($|\h))</expression>
          <capture number="2" name="haskell.keyword.construct.default" />
          <capture number="3" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\3\s)(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type-annotation" />
          <include syntax="self" collection="implementation" />
        </subscopes>
      </scope>
    </collection>

    <collection name="do-bind">
      <scope name="do-bind">
        <starts-with>
          <expression>^(?=((\h*)\S.+&lt;-($|\h)))</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\1)(?!\2\h)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="do-pattern" />
          <include syntax="self" collection="expressions" />
          <!--          <scope name="bind-arrow">
            <expression>&lt;-</expression>
          </scope> -->
        </subscopes>
      </scope>
    </collection>

    <collection name="do-pattern">
      <scope name="do-pattern">
        <starts-with>
          <expression>^(?=((\h*)\S.+&lt;-($|\h)))</expression>
        </starts-with>
        <ends-with>
          <expression>&lt;-</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
          <!--          <scope name="bind-arrow">
            <expression>&lt;-</expression>
          </scope>
          <include syntax="self" collection="expressions" repeat="true" /> -->
        </subscopes>
      </scope>
    </collection>

    <collection name="implementation">
      <scope name="haskell.definition.type.function">
        <local scope="within-construct" />
        <starts-with>
          <expression>^(\h*)(default\h+)?`?(\w(\w|')*)`?($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.default" />
          <capture number="3" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\3\s)(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="where-clause" />
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-annotation">
      <scope name="haskell.definition.type.function">
        <starts-with>
          <expression>^(\h*)`?(\w(\w|')*)`?\h*::($|\h)</expression>
          <capture number="2" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-definition">
      <scope name="haskell.definition.type">
        <starts-with>
          <expression>^(\h*)(type)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.type" />
          <capture number="3" name="haskell.identifier.type" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="GADT-definition">
      <scope name="haskell.definition.struct.GADT">
        <symbol type="struct">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>^(\h*)(data|newtype)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.data.GADT" />
          <capture number="3" name="haskell.identifier.data.type.name" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>

          <include syntax="self" collection="deriving-clause" />
          <include syntax="self" collection="record-definition" />
          <include syntax="self" collection="gadt-constructor" />
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="gadt-constructor">
      <scope name="haskell.identifier.type.struct.data.constructor">
        <symbol type="constructor">
          <context behavior="whitespace" />
        </symbol>
        <expression>(^|=|\|)\h+([A-Z](\w|')*)</expression>
        <capture number="2" name="haskell.identifier.data.name" />
      </scope>
      <scope name="identifier.type.struct.GADT.constructor">
        <symbol type="constructor"></symbol>
        <expression>^\h+([A-Z](\w|')*)</expression>
        <capture number="1" name="haskell.identifier.data.name" />
      </scope>
    </collection>

    <collection name="deriving-clause">
      <scope name="haskell.record.construct.deriving.keyword">
        <expression>deriving\h+(newtype|stock|anyclass)</expression>
      </scope>
    </collection>

    <collection name="record-definition">
      <scope name="haskell.record">
        <symbol>
          <context behavior="subtree" foldable="true" />
        </symbol>
        <starts-with>
          <expression>(?=\{)</expression>
          <capture number="0" name="haskell.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.record.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="record-definition-field-name" />
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="record-definition-field-name">
      <scope name="haskell.record.definition.property">
        <symbol type="property" />
        <expression>(((?![A-Z])\w(\w|')*)\h*::|(^|\{|,)\h*((?![A-Z])\w(\w|')*))</expression>
        <capture number="5" name="haskell.record.definition.property.field.property.name" />
        <capture number="2" name="haskell.record.definition.property.field.property.name" />
      </scope>
    </collection>

    <collection name="type">
      <scope name="haskell.type.construct.tuple">
        <starts-with>
          <expression>\(</expression>
        </starts-with>
        <ends-with>
          <expression>\)</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.construct.type.typle.comma">
            <expression>\,</expression>
          </scope>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="haskell.type.list">
        <starts-with>
          <expression>'?\[</expression>
        </starts-with>
        <ends-with>
          <expression>\]</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="haskell.type.star">
        <expression>\*</expression>
      </scope>
      <scope name="haskell.keyword.construct.type-annotation-operator">
        <expression>::</expression>
      </scope>
      <include syntax="self" collection="type-list" />
      <scope>
        <expression>(([A-Z](\w|')*\.)*)'*([A-Z](\w|')*)</expression>
        <capture number="1" name="haskell.identifier.package.module" />
        <capture number="4" name="haskell.identifier.type" />
      </scope>
      <scope name="haskell.keyword.construct.forall">
        <expression>forall</expression>
      </scope>
      <scope name="haskell.identifier.type.variable">
        <expression>(?!=)((?!(\(|\)|\,))\S)((?!(\(|\)|\,))\S)*</expression>
      </scope>
      <scope name="haskell.keyword.construct.function-arrow">
        <expression>-&gt;</expression>
      </scope>
      <scope name="haskell.keyword.construct.fat-arrow">
        <expression>=&gt;</expression>
      </scope>
    </collection>

    <collection name="pattern-definition">
      <scope name="haskell.pattern">
        <starts-with>
          <expression>^(\h*)(pattern)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.pattern" />
          <capture number="3" name="haskell.identifier.decorator.pattern" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-list">
      <scope name="haskell.type-list">
        <starts-with>
          <expression>('\[)</expression>
          <capture number="1" name="haskell.type-list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.type-list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="lambda-head">
      <scope name="haskell.lambda">
        <starts-with>
          <expression>(\\)</expression>
          <capture number="1" name="haskell.keyword.construct.lambda" />
        </starts-with>
        <ends-with>
          <expression>(-&gt;)</expression>
          <capture number="1" name="haskell.keyword.construct.lambda" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="lambda-case">
      <scope name="haskell.keyword.condition.lambda-case">
        <expression>\\case</expression>
      </scope>
    </collection>

    <collection name="where-clause">
      <scope name="haskell.construct.where">
        <local scope="within-parent" />
        <starts-with>
          <expression>^(\h*)(where)</expression>
          <capture number="2" name="haskell.construct.keyword.where" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\s*\S)(?!s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>


    <collection name="qvarid">
      <scope name="haskell.identifier.function">
        <expression>(([A-Z](\w|')*\.)*)(\w(\w|')*)</expression>
        <capture number="1" name="haskell.identifier.package.module" />
        <capture number="4" name="haskell.identifier.type" />
      </scope>
    </collection>

    <collection name="varid">
      <scope name="haskell.identifier.variable">
        <expression>\w(\w|')*</expression>
      </scope>
    </collection>

    <collection name="qconid">
      <scope name="haskell.identifier.type.struct.constructor">
        <expression>([A-Z](\w|')*\.)*[A-Z](\w|')*</expression>
      </scope>
    </collection>

    <collection name="qconsym">
      <scope name="haskell.identifier.decorator.pattern">
        <expression>([A-Z](\w|')*\.):(\w|')*</expression>
      </scope>
    </collection>

    <collection name="literal">
      <include syntax="self" collection="number" />
      <include syntax="self" collection="strings" />
    </collection>


    <collection name="strings">
      <scope name="haskell.string.double-quoted">
        <starts-with>
          <expression>"</expression>
        </starts-with>
        <ends-with>
          <expression>"</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.string.escape-sequences">
            <expression>\\.</expression>
          </scope>
        </subscopes>
      </scope>
      <scope name="haskell.string.single-quoted">
        <expression>'([^'\\]|\\.)'</expression>
      </scope>
    </collection>


    <collection name="number">
      <scope name="haskell.value.number">
        <expression>(0x|0o|0O|0X)?\d+(\d|_)*(\.[\d|_]+)?((e|E)(\+|-)?\d+)?</expression>
      </scope>
    </collection>


    <collection name="module">
      <scope name="haskell.definition.module.package">
        <symbol type="package">
          <context behavior="subtree" foldable="true" export-local="true" />
        </symbol>
        <starts-with>
          <expression>^(module)\s+((\w|\.)+)</expression>
          <capture number="1" name="haskell.construct.keyword.module" />
          <capture number="2" name="haskell.definition.module.package" />
        </starts-with>
        <ends-with>
          <expression>(where)</expression>
          <capture number="1" name="haskell.construct.keyword.module" />
        </ends-with>
        <subscopes>
          <scope name="identifier.haskell.type">
            <symbol type="expression" />
            <expression>([A-Z](\w|')*)\h*(\(\h*\.\.\h*\))?</expression>
            <capture number="1" name="identifier.type" />
          </scope>
          <scope name="identifier.variable">
            <symbol type="expression" />
            <expression>(\w|')+</expression>
            <capture number="0" name="identifier.haskell.function" />
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="import">
      <scope name="haskell.construct.import">
        <starts-with>
          <expression>^(import)\s</expression>
          <capture number="1" name="haskell.construct.keyword.import" />
        </starts-with>
        <ends-with>
          <expression>(?=^\S)</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.construct.qualified">
            <expression>qualified</expression>
            <capture number="0" name="haskell.construct.keyword.qualified" />
          </scope>

          <scope name="haskell.construct.hiding">
            <symbol type="keyword">
              <context behavior="subtree" />
            </symbol>
            <starts-with>
              <expression>(hiding)\h*(?=\()</expression>
              <capture number="1" name="haskell.construct.keyword.hiding" />
            </starts-with>
            <ends-with>
              <expression>(?=\))</expression>
            </ends-with>
            <subscopes anchored="true">
              <include syntax="self" collection="import-list" />
            </subscopes>
          </scope>

          <scope name="haskell.construct.keyword.as">
            <symbol type="package" />
            <expression>as(\h+([A-Z]\w*))?</expression>
            <capture number="2" name="haskell.package.qualified.name" />
          </scope>
          <scope name="haskell.identifier.module.package">
            <symbol type="package" />
            <expression>([A-Z](\w|')*\.)*[A-Z](\w|')*</expression>
            <capture number="0" name="haskell.package.name" />
          </scope>
          <include syntax="self" collection="import-list" />
        </subscopes>
      </scope>
    </collection>

    <collection name="import-list">
      <scope name="import-list">
        <symbol>
          <context behavior="subtree" export-local="true" />
        </symbol>
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.import-list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.import-list.bracket" />
        </ends-with>
        <subscopes>
          <scope name="haskell.identifier.struct">
            <symbol type="reference" scope="local" />
            <expression>([A-Z](\w|')*)\h*(\(\h*\.\.\h*\))?</expression>
            <capture number="1" name="haskell.import-list.identifier.type.name" />
          </scope>
          <scope name="haskell.identifier.function">
            <symbol type="reference" scope="local" />
            <expression>(\w|')+</expression>
            <capture number="0" name="haskell.import-list.function.name" />
          </scope>
        </subscopes>
      </scope>
    </collection>

    <!--     <collection name="special">
      <scope>
        <expression>(;|,)</expression>
      </scope>
    </collection> -->


    <collection name="reservedop">
      <scope name="keyword.operator">
        <expression>(\.\.|:|::|=|\\|\||&lt;-|-&gt;|@|~|=>)</expression>
      </scope>
    </collection>

    <collection name="keywords">
      <scope name="haskell.keyword.modifier">
        <symbol type="keyword" />
        <strings>
          <string>do</string>
          <string>in</string>
          <string>infix</string>
          <string>infixl</string>
          <string>infixr</string>
          <string>where</string>
          <string>let</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.condition">
        <symbol type="keyword" />
        <strings>
          <string>of</string>
          <string>case</string>
          <string>else</string>
          <string>if</string>
          <string>then</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.keyword.construct">
        <symbol type="keyword" />
        <strings>
          <string>instance</string>
          <string>newtype</string>
          <string>module</string>
          <string>type</string>
          <string>class</string>
          <string>data</string>
          <string>default</string>
          <string>deriving</string>
          <string>foreign</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.self">
        <symbol type="keyword" />
        <strings>
          <string>undefined</string>
          <string>_</string>
        </strings>
      </scope>
    </collection>

    <collection name="comments">
      <scope name="haskell.comment.single" spell-check="true">
        <starts-with>
          <expression>--</expression>
        </starts-with>
        <ends-with>
          <expression>$</expression>
        </ends-with>
      </scope>
      <scope name="haskell.comment.block" spell-check="true">
        <starts-with>
          <expression>{-</expression>
        </starts-with>
        <ends-with>
          <expression>-}</expression>
        </ends-with>
      </scope>
    </collection>


  </collections>
</syntax><?xml version="1.0" encoding="UTF-8"?>
<syntax name="haskell">
  <meta>
    <name>Haskell</name>
    <type>compiled</type>
    <preferred-file-extension>hs</preferred-file-extension>
  </meta>

  <detectors>
    <extension priority="1.0">hs</extension>
  </detectors>

  <comments>
    <single>
      <expression>--</expression>
    </single>
    <multiline>
      <starts-with>
        <expression>{-</expression>
      </starts-with>
      <ends-with>
        <expression>-}</expression>
      </ends-with>
    </multiline>
  </comments>

  <brackets>
    <pair open="{" close="}" />
    <pair open="[" close="]" />
    <pair open="(" close=")" />
  </brackets>

  <surrounding-pairs>
    <pair open="[" close="]" />
    <pair open="(" close=")" />
    <pair open="&apos;" close="&apos;" />
    <pair open="&quot;" close="&quot;" />
    <pair open="`" close="`" />
  </surrounding-pairs>

  <indentation>
    <increase>
      <expression>
        (case|class|do|let|where|=).*
      </expression>
    </increase>
    <decrease>
      <expression>^\\s*(end|done|with|in|else)\\b|^\\s*;;</expression>
    </decrease>
  </indentation>


  <scopes>
    <include syntax="self" collection="comments" />
    <include syntax="self" collection="module" />
    <include syntax="self" collection="import" />
    <include syntax="self" collection="type-family-definition" />
    <include syntax="self" collection="pattern-definition" />
    <include syntax="self" collection="type-definition" />
    <!--     <include syntax="self" collection="type-annotation" /> -->
    <include syntax="self" collection="GADT-definition" />
    <include syntax="self" collection="instance" />
    <include syntax="self" collection="typeclass" />
    <include syntax="self" collection="definition" />
  </scopes>

  <template-scopes>
    <include syntax="self" collection="Quote" />
    <include syntax="self" collection="comments" />
  </template-scopes>

  <collections>


    <collection name="operators">
      <scope name="keyword.modifier">
        <expression>(!|#|\$|%|&amp;|â‹†|\+|\.|/|&lt;|=|&gt;|\?|@|\\|\^|\||-|~|:)+</expression>
      </scope>
    </collection>

    <collection name="expressions">
      <include syntax="self" collection="do-bind" />
      <include syntax="self" collection="literal" />
      <include syntax="self" collection="operators" />
      <include syntax="self" collection="list" />
      <include syntax="self" collection="lambda-case" />
      <include syntax="self" collection="lambda-head" />
      <include syntax="self" collection="type-applications" />
      <include syntax="self" collection="outer-case-expression" />
      <include syntax="self" collection="qvarid" />
      <include syntax="self" collection="tuple" />


      <!-- Needed for do binds -->
      <!--       <include syntax="self" collection="pattern-match" /> -->
    </collection>

    <collection name="pattern-match">
      <include syntax="self" collection="literal" />
      <include syntax="self" collection="tuple-match" />
      <!--       <include syntax="self" collection="at-pattern" /> -->
      <include syntax="self" collection="varid" />
      <include syntax="self" collection="qconid" />
      <include syntax="self" collection="record-match" />
      <include syntax="self" collection="list-pattern" />
      <include syntax="self" collection="view-pattern" />
    </collection>

    <collection name="type-applications">
      <scope name="type-applications">
        <starts-with>
          <expression>(\s@)\(</expression>
          <capture number="1" name="haskell.keyword.operator.typeapplication" />
        </starts-with>
        <ends-with>
          <expression>)</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="type-applications-single">
        <expression>(@)(\w+)</expression>
        <capture number="1" name="haskell.keyword.operator.typeapplication" />
        <capture number="2" name="haskell.identifier.type" />
      </scope>
    </collection>

    <collection name="Quote">
      <scope name="haskell.quasiquote.string-template">
        <starts-with>
          <expression>\[((?:\w|')+)\|</expression>
          <capture number="1" name="haskell.identifier.constant" />
        </starts-with>
        <ends-with>
          <expression>\|\]</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.quasiquote.string-template.value">
            <expression>.+?</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="record-match">
      <include syntax="self" collection="qconid" />
      <include syntax="self" collection="record-fields-match" />
      <include syntax="self" collection="record-fields-match-all" />
    </collection>


    <collection name="record-fields-match">
      <scope name="record-fields-match">
        <symbol type="expression" />
        <starts-with>
          <expression>(\{)</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
          <include syntax="self" collection="varid" />
          <scope name="record-sep">
            <expression>=</expression>
          </scope>
          <scope name="record-sep">
            <expression>,</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="record-fields-match-wildcard">
      <scope name="record-fields-match-all">
        <starts-with>
          <expression>(\{)</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.pattern.record.bracket" />
        </ends-with>
        <subscopes>
          <scope name="haskell.pattern.record.wildcard">
            <expression>\.\.</expression>
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="bind-arrow">
      <scope name="haskell.operator.bind-arrow">
        <expression>&lt;-</expression>
      </scope>
    </collection>


    <collection name="list">
      <symbol type="expression" />
      <scope name="haskell.list">
        <starts-with>
          <expression>(\[)</expression>
          <capture number="1" name="haskell.list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="list-pattern">
      <symbol type="expression" />
      <scope name="haskell.pattern.list">
        <starts-with>
          <expression>(\[)</expression>
          <capture number="1" name="haskell.pattern.list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.pattern.list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>


    <collection name="view-pattern">
      <scope name="haskell.pattern.view">
        <symbol type="expression" />
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.pattern.view.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.pattern.view.bracket" />
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="expressions" />
          <scope name="haskell.pattern.view.operator.arrow">
            <expression>-&gt;</expression>
          </scope>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="tuple-match">
      <symbol type="expression" />
      <scope name="haskell.pattern.tuple">
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.pattern.tuple.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.pattern.tuple.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="case-expression">
      <scope name="haskell.case">
        <starts-with>
          <expression>(case)</expression>
          <capture number="1" name="haskell.case.keyword.condition" />
        </starts-with>
        <ends-with>
          <expression>(of)</expression>
          <capture number="1" name="haskell.case.keyword.condition" />
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="case-match">
      <scope name="case-match">
        <starts-with>
          <expression>(?=((\h*)\S.*-&gt;($|\h)))</expression>
        </starts-with>
        <ends-with>
          <expression>-&gt;</expression>
        </ends-with>
        <subscopes anchored="true">
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="inner-case-expressions">
      <scope name="inner-case-expressions">
        <starts-with>
          <expression>(?=((\h*)\S.*-&gt;($|\h)))</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\1)(?!\2\h)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="case-match" />
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="outer-case-expression">
      <scope name="outer-case-expression">
        <starts-with>
          <expression>(?=case)</expression>
        </starts-with>
        <ends-with />
        <subscopes anchored="true" skip-whitespace="false">
          <include syntax="self" collection="case-expression" />
          <include syntax="self" collection="inner-case-expressions" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="tuple">
      <symbol type="expression" />
      <scope name="haskell.tuple">
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.tuple.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.tuple.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="typeclass">
      <symbol type="interface" />
      <scope name="haskell.definition.class">
        <starts-with>
          <expression>^(\h*)(class)($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.class" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="type" />
          <include syntax="self" collection="type-definition" />
          <!--           <include syntax="self" collection="type-annotation" /> -->
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>

    <collection name="instance">
      <scope name="haskell.instance">
        <symbol type="category" />
        <starts-with>
          <expression>^(\h*)(instance)($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.instance" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="type" />
          <include syntax="self" collection="type-definition" />
          <include syntax="self" collection="type-annotation" />
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-family-definition">
      <scope name="haskell.definition.type-family.type">
        <symbol type="type">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>^(\h*)(type\h+family)</expression>
          <capture number="2" name="haskell.keyword.construct.type-family" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes anchored="true" skip-whitespace="false">
          <scope name="haskell.type-family.head">
            <starts-with>
              <expression></expression>
            </starts-with>
            <ends-with>
              <expression>where</expression>
              <capture number="0" name="haskell.keyword.construct.where" />
            </ends-with>
            <subscopes anchored="true">
              <scope name="haskell.identifier.type-family.type.name">
                <expression>\S+</expression>
              </scope>
              <include syntax="self" collection="type" repeat="true" optional="true" />
            </subscopes>
          </scope>

          <include syntax="self" collection="type-family-case-definition" optional="true" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-family-case-definition">
      <scope name="haskell.definition.type-family.type.case">
        <starts-with>
          <expression>^(\h*)(?=\S)</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" optional="true" repeat="true" />
          <scope>
            <expression>=</expression>
          </scope>
          <include syntax="self" collection="type" optional="true" repeat="true" />
        </subscopes>
      </scope>
    </collection>

    <collection name="definition">
      <scope name="haskell.definition.type.function">
        <symbol type="function">
          <display-name>
            <component selector="haskell.definition.type.function" />
          </display-name>

        </symbol>
        <starts-with>
          <expression>^(?=(\h*)(default\h+)?`?(\w(\w|')*)`?($|\h))</expression>
          <capture number="2" name="haskell.keyword.construct.default" />
          <capture number="3" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\3\s)(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type-annotation" />
          <include syntax="self" collection="implementation" />
        </subscopes>
      </scope>
    </collection>

    <collection name="do-bind">
      <scope name="do-bind">
        <starts-with>
          <expression>^(?=((\h*)\S.+&lt;-($|\h)))</expression>
        </starts-with>
        <ends-with>
          <template>^(?!\1)(?!\2\h)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="do-pattern" />
          <include syntax="self" collection="expressions" />
          <!--          <scope name="bind-arrow">
            <expression>&lt;-</expression>
          </scope> -->
        </subscopes>
      </scope>
    </collection>

    <collection name="do-pattern">
      <scope name="do-pattern">
        <starts-with>
          <expression>^(?=((\h*)\S.+&lt;-($|\h)))</expression>
        </starts-with>
        <ends-with>
          <expression>&lt;-</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
          <!--          <scope name="bind-arrow">
            <expression>&lt;-</expression>
          </scope>
          <include syntax="self" collection="expressions" repeat="true" /> -->
        </subscopes>
      </scope>
    </collection>

    <collection name="implementation">
      <scope name="haskell.definition.type.function">
        <local scope="within-construct" />
        <starts-with>
          <expression>^(\h*)(default\h+)?`?(\w(\w|')*)`?($|\h)</expression>
          <capture number="2" name="haskell.keyword.construct.default" />
          <capture number="3" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\3\s)(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="where-clause" />
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-annotation">
      <scope name="haskell.definition.type.function">
        <starts-with>
          <expression>^(\h*)`?(\w(\w|')*)`?\h*::($|\h)</expression>
          <capture number="2" name="haskell.identifier.function" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-definition">
      <scope name="haskell.definition.type">
        <starts-with>
          <expression>^(\h*)(type)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.type" />
          <capture number="3" name="haskell.identifier.type" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="GADT-definition">
      <scope name="haskell.definition.struct.GADT">
        <symbol type="struct">
          <context behavior="subtree" foldable="false" />
        </symbol>
        <starts-with>
          <expression>^(\h*)(data|newtype)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.data.GADT" />
          <capture number="3" name="haskell.identifier.data.type.name" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>

          <include syntax="self" collection="deriving-clause" />
          <include syntax="self" collection="record-definition" />
          <include syntax="self" collection="gadt-constructor" />
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="gadt-constructor">
      <scope name="haskell.identifier.type.struct.data.constructor">
        <symbol type="constructor">
          <context behavior="whitespace" />
        </symbol>
        <expression>(^|=|\|)\h+([A-Z](\w|')*)</expression>
        <capture number="2" name="haskell.identifier.data.name" />
      </scope>
      <scope name="identifier.type.struct.GADT.constructor">
        <symbol type="constructor"></symbol>
        <expression>^\h+([A-Z](\w|')*)</expression>
        <capture number="1" name="haskell.identifier.data.name" />
      </scope>
    </collection>

    <collection name="deriving-clause">
      <scope name="haskell.record.construct.deriving.keyword">
        <expression>deriving\h+(newtype|stock|anyclass)</expression>
      </scope>
    </collection>

    <collection name="record-definition">
      <scope name="haskell.record">
        <symbol>
          <context behavior="subtree" foldable="true" />
        </symbol>
        <starts-with>
          <expression>(?=\{)</expression>
          <capture number="0" name="haskell.record.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\})</expression>
          <capture number="1" name="haskell.record.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="record-definition-field-name" />
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="record-definition-field-name">
      <scope name="haskell.record.definition.property">
        <symbol type="property" />
        <expression>(((?![A-Z])\w(\w|')*)\h*::|(^|\{|,)\h*((?![A-Z])\w(\w|')*))</expression>
        <capture number="5" name="haskell.record.definition.property.field.property.name" />
        <capture number="2" name="haskell.record.definition.property.field.property.name" />
      </scope>
    </collection>

    <collection name="type">
      <scope name="haskell.type.construct.tuple">
        <starts-with>
          <expression>\(</expression>
        </starts-with>
        <ends-with>
          <expression>\)</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.construct.type.typle.comma">
            <expression>\,</expression>
          </scope>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="haskell.type.list">
        <starts-with>
          <expression>'?\[</expression>
        </starts-with>
        <ends-with>
          <expression>\]</expression>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
      <scope name="haskell.type.star">
        <expression>\*</expression>
      </scope>
      <scope name="haskell.keyword.construct.type-annotation-operator">
        <expression>::</expression>
      </scope>
      <include syntax="self" collection="type-list" />
      <scope>
        <expression>(([A-Z](\w|')*\.)*)'*([A-Z](\w|')*)</expression>
        <capture number="1" name="haskell.identifier.package.module" />
        <capture number="4" name="haskell.identifier.type" />
      </scope>
      <scope name="haskell.keyword.construct.forall">
        <expression>forall</expression>
      </scope>
      <scope name="haskell.identifier.type.variable">
        <expression>(?!=)((?!(\(|\)|\,))\S)((?!(\(|\)|\,))\S)*</expression>
      </scope>
      <scope name="haskell.keyword.construct.function-arrow">
        <expression>-&gt;</expression>
      </scope>
      <scope name="haskell.keyword.construct.fat-arrow">
        <expression>=&gt;</expression>
      </scope>
    </collection>

    <collection name="pattern-definition">
      <scope name="haskell.pattern">
        <starts-with>
          <expression>^(\h*)(pattern)\h+(\w(\w|')*)</expression>
          <capture number="2" name="haskell.keyword.construct.pattern" />
          <capture number="3" name="haskell.identifier.decorator.pattern" />
        </starts-with>
        <ends-with>
          <template>^(?!\s+\1\S)(?!\s*$)</template>
        </ends-with>
        <subscopes>
          <scope name="haskell.keyword.construct.where">
            <expression>where</expression>
          </scope>
          <include syntax="self" collection="expressions" />
        </subscopes>
      </scope>
    </collection>

    <collection name="type-list">
      <scope name="haskell.type-list">
        <starts-with>
          <expression>('\[)</expression>
          <capture number="1" name="haskell.type-list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\])</expression>
          <capture number="1" name="haskell.type-list.bracket" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="type" />
        </subscopes>
      </scope>
    </collection>

    <collection name="lambda-head">
      <scope name="haskell.lambda">
        <starts-with>
          <expression>(\\)</expression>
          <capture number="1" name="haskell.keyword.construct.lambda" />
        </starts-with>
        <ends-with>
          <expression>(-&gt;)</expression>
          <capture number="1" name="haskell.keyword.construct.lambda" />
        </ends-with>
        <subscopes>
          <include syntax="self" collection="pattern-match" />
        </subscopes>
      </scope>
    </collection>

    <collection name="lambda-case">
      <scope name="haskell.keyword.condition.lambda-case">
        <expression>\\case</expression>
      </scope>
    </collection>

    <collection name="where-clause">
      <scope name="haskell.construct.where">
        <local scope="within-parent" />
        <starts-with>
          <expression>^(\h*)(where)</expression>
          <capture number="2" name="haskell.construct.keyword.where" />
        </starts-with>
        <ends-with>
          <template>^(?!\1\s*\S)(?!s*$)</template>
        </ends-with>
        <subscopes>
          <include syntax="self" collection="definition" />
        </subscopes>
      </scope>
    </collection>


    <collection name="qvarid">
      <scope name="haskell.identifier.function">
        <expression>(([A-Z](\w|')*\.)*)(\w(\w|')*)</expression>
        <capture number="1" name="haskell.identifier.package.module" />
        <capture number="4" name="haskell.identifier.type" />
      </scope>
    </collection>

    <collection name="varid">
      <scope name="haskell.identifier.variable">
        <expression>\w(\w|')*</expression>
      </scope>
    </collection>

    <collection name="qconid">
      <scope name="haskell.identifier.type.struct.constructor">
        <expression>([A-Z](\w|')*\.)*[A-Z](\w|')*</expression>
      </scope>
    </collection>

    <collection name="qconsym">
      <scope name="haskell.identifier.decorator.pattern">
        <expression>([A-Z](\w|')*\.):(\w|')*</expression>
      </scope>
    </collection>

    <collection name="literal">
      <include syntax="self" collection="number" />
      <include syntax="self" collection="strings" />
    </collection>


    <collection name="strings">
      <scope name="haskell.string.double-quoted">
        <starts-with>
          <expression>"</expression>
        </starts-with>
        <ends-with>
          <expression>"</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.string.escape-sequences">
            <expression>\\.</expression>
          </scope>
        </subscopes>
      </scope>
      <scope name="haskell.string.single-quoted">
        <expression>'([^'\\]|\\.)'</expression>
      </scope>
    </collection>


    <collection name="number">
      <scope name="haskell.value.number">
        <expression>(0x|0o|0O|0X)?\d+(\d|_)*(\.[\d|_]+)?((e|E)(\+|-)?\d+)?</expression>
      </scope>
    </collection>


    <collection name="module">
      <scope name="haskell.definition.module.package">
        <symbol type="package">
          <context behavior="subtree" foldable="true" export-local="true" />
        </symbol>
        <starts-with>
          <expression>^(module)\s+((\w|\.)+)</expression>
          <capture number="1" name="haskell.construct.keyword.module" />
          <capture number="2" name="haskell.definition.module.package" />
        </starts-with>
        <ends-with>
          <expression>(where)</expression>
          <capture number="1" name="haskell.construct.keyword.module" />
        </ends-with>
        <subscopes>
          <scope name="identifier.haskell.type">
            <symbol type="expression" />
            <expression>([A-Z](\w|')*)\h*(\(\h*\.\.\h*\))?</expression>
            <capture number="1" name="identifier.type" />
          </scope>
          <scope name="identifier.variable">
            <symbol type="expression" />
            <expression>(\w|')+</expression>
            <capture number="0" name="identifier.haskell.function" />
          </scope>
        </subscopes>
      </scope>
    </collection>

    <collection name="import">
      <scope name="haskell.construct.import">
        <starts-with>
          <expression>^(import)\s</expression>
          <capture number="1" name="haskell.construct.keyword.import" />
        </starts-with>
        <ends-with>
          <expression>(?=^\S)</expression>
        </ends-with>
        <subscopes>
          <scope name="haskell.construct.qualified">
            <expression>qualified</expression>
            <capture number="0" name="haskell.construct.keyword.qualified" />
          </scope>

          <scope name="haskell.construct.hiding">
            <symbol type="keyword">
              <context behavior="subtree" />
            </symbol>
            <starts-with>
              <expression>(hiding)\h*(?=\()</expression>
              <capture number="1" name="haskell.construct.keyword.hiding" />
            </starts-with>
            <ends-with>
              <expression>(?=\))</expression>
            </ends-with>
            <subscopes anchored="true">
              <include syntax="self" collection="import-list" />
            </subscopes>
          </scope>

          <scope name="haskell.construct.keyword.as">
            <symbol type="package" />
            <expression>as(\h+([A-Z]\w*))?</expression>
            <capture number="2" name="haskell.package.qualified.name" />
          </scope>
          <scope name="haskell.identifier.module.package">
            <symbol type="package" />
            <expression>([A-Z](\w|')*\.)*[A-Z](\w|')*</expression>
            <capture number="0" name="haskell.package.name" />
          </scope>
          <include syntax="self" collection="import-list" />
        </subscopes>
      </scope>
    </collection>

    <collection name="import-list">
      <scope name="import-list">
        <symbol>
          <context behavior="subtree" export-local="true" />
        </symbol>
        <starts-with>
          <expression>(\()</expression>
          <capture number="1" name="haskell.import-list.bracket" />
        </starts-with>
        <ends-with>
          <expression>(\))</expression>
          <capture number="1" name="haskell.import-list.bracket" />
        </ends-with>
        <subscopes>
          <scope name="haskell.identifier.struct">
            <symbol type="reference" scope="local" />
            <expression>([A-Z](\w|')*)\h*(\(\h*\.\.\h*\))?</expression>
            <capture number="1" name="haskell.import-list.identifier.type.name" />
          </scope>
          <scope name="haskell.identifier.function">
            <symbol type="reference" scope="local" />
            <expression>(\w|')+</expression>
            <capture number="0" name="haskell.import-list.function.name" />
          </scope>
        </subscopes>
      </scope>
    </collection>

    <!--     <collection name="special">
      <scope>
        <expression>(;|,)</expression>
      </scope>
    </collection> -->


    <collection name="reservedop">
      <scope name="keyword.operator">
        <expression>(\.\.|:|::|=|\\|\||&lt;-|-&gt;|@|~|=>)</expression>
      </scope>
    </collection>

    <collection name="keywords">
      <scope name="haskell.keyword.modifier">
        <symbol type="keyword" />
        <strings>
          <string>do</string>
          <string>in</string>
          <string>infix</string>
          <string>infixl</string>
          <string>infixr</string>
          <string>where</string>
          <string>let</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.condition">
        <symbol type="keyword" />
        <strings>
          <string>of</string>
          <string>case</string>
          <string>else</string>
          <string>if</string>
          <string>then</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.keyword.construct">
        <symbol type="keyword" />
        <strings>
          <string>instance</string>
          <string>module</string>
          <string>type</string>
          <string>class</string>
          <string>data</string>
          <string>default</string>
          <string>deriving</string>
          <string>foreign</string>
        </strings>
      </scope>
      <scope name="haskell.keyword.self">
        <symbol type="keyword" />
        <strings>
          <string>undefined</string>
          <string>_</string>
        </strings>
      </scope>
    </collection>

    <collection name="comments">
      <scope name="haskell.comment.single" spell-check="true">
        <starts-with>
          <expression>--</expression>
        </starts-with>
        <ends-with>
          <expression>$</expression>
        </ends-with>
      </scope>
      <scope name="haskell.comment.block" spell-check="true">
        <starts-with>
          <expression>{-</expression>
        </starts-with>
        <ends-with>
          <expression>-}</expression>
        </ends-with>
      </scope>
    </collection>


  </collections>
</syntax>